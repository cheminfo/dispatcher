define(["./../matrix-tools","./../../math/matrix","./../../math/decompositions"],function(a,b,c){function d(c,d){0!==arguments.length&&("undefined"==typeof d&&(d="center"),c instanceof b||(c=new b(c)),this.source=c.clone(),this.columnMeans=a.mean(c),this.columnStdDev=a.standardDeviation(c,this.columnMeans),this.analysisMethod=d,this.sourceDimensions=c.columns,this.onlyCovarianceMatrixAvailable=!1,this.overwriteSourceMatrix=!1)}function e(c,d,e){var f=a.center(d,c.columnMeans,e);if("standardize"===c.analysisMethod){for(var g=0,h=c.columnStdDev.length;h>g;g++)if(0===c.columnStdDev[g])throw"Standard deviation cannot be zero (cannot standardize the constant variable at column index "+g+").";a.standardize(f,c.columnStdDev,!0)}return new b(e?d:f)}function f(a){var b=a.singularValues.length;a.componentProportions=new Array(b),a.componentCumulative=new Array(b);for(var c=0,d=0;b>d;d++)c+=Math.abs(a.eigenvalues[d]);c=0===c?0:1/c;for(var d=0;b>d;d++)a.componentProportions[d]=Math.abs(a.eigenvalues[d])*c;a.componentCumulative[0]=a.componentProportions[0];for(var d=1,e=a.componentCumulative.length;e>d;d++)a.componentCumulative[d]=a.componentCumulative[d-1]+a.componentProportions[d]}return d.fromCovarianceMatrix=function(a,c){if(c instanceof b||(c=new b(c)),!c.isSquare())throw"Covariance matrix must be square";var e=new d;return e.columnMeans=a,e.covarianceMatrix=c,e.analysisMethod="center",e.onlyCovarianceMatrixAvailable=!0,e.sourceDimensions=c.rows,e},d.fromCorrelationMatrix=function(a,c,e){if(e instanceof b||(e=new b(e)),!e.isSquare())throw"Correlation matrix must be square";var f=new d;return f.columnMeans=a,f.columnStdDev=c,f.covarianceMatrix=e,f.analysisMethod="standardize",f.onlyCovarianceMatrixAvailable=!0,f.sourceDimensions=e.rows,f},d.prototype={compute:function(){if(this.onlyCovarianceMatrixAvailable){var a=new c.EigenvalueDecomposition(this.covarianceMatrix);this.eigenvalues=a.RealEigenvalues,this.eigenvectors=a.eigenvectors,this.singularValues=new Array(this.eigenvalues.length)}else{var d=this.source.rows,g=e(this,this.source,this.overwriteSourceMatrix),h=new c.SingularValueDecomposition(g);this.singularValues=h.diagonal(),this.eigenvectors=h.V,this.result=h.U.mmul(b.diag(this.singularValues)),this.eigenvalues=new Array(this.singularValues.length);for(var i=0,j=this.singularValues.length;j>i;i++)this.eigenvalues[i]=this.singularValues[i]*this.singularValues[i]/(d-1)}f(this)},transform:function(a,c){if(void 0===this.eigenvectors)throw"The analysis must have been computed first.";if(a instanceof b||(a=new b(a)),a.columns!==this.sourceDimensions)throw"The input data should have the same number of columns as the original data.";if(0>c||c>this.singularValues.length)throw"The specified number of dimensions must be equal or less than the number of components available in the analysis";var d=a.rows,f=a.columns;a=e(this,a,!1);for(var g=b.zeros(d,c),h=0;d>h;h++)for(var i=0;c>i;i++)for(var j=0;f>j;j++)g[h][i]+=a[h][j]*this.eigenvectors[j][i];return g},numberOfComponents:function(a){if(0>a||a>1)throw"Threshold should be a value between 0 and 1.";for(var b=0,c=this.componentCumulative.length;c>b;b++)if(this.componentCumulative[b]>=a)return b+1;return this.componentCumulative.length}},d});