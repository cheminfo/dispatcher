define(["./../../../math/decompositions","./../../../math/matrix"],function(a,b){function c(a,c,d){if("undefined"==typeof d&&(d=!1),a instanceof b)this.coefficients=a,this.intercepts=c,this.insertConstant=d;else{this.coefficients=b.zeros(a,c),this.intercepts=new Array(c);for(var e=0;c>e;this.intercepts[e++]=0);this.insertConstant=d}}function d(a,b){for(var c=b.length,d=new Array(c),e=0;c>e;e++)d[e]=a.compute(b[e]);return d}return c.prototype={get inputs(){return this.coefficients.rows},get outputs(){return this.coefficients.columns},regress:function(c,d){if(c.rows!==d.rows)throw"Number of input and output samples does not match.";var e=c.columns,f=c.rows;this.insertConstant&&e++;for(var g=0,h=this.coefficients.columns;h>g;g++){for(var i=new Array(e),j=0,k=i.length;k>j;i[j++]=0);for(var l=b.zeros(e,e),j=0;e>j;j++){for(var m=0;e>m;m++)for(var n=0;f>n;n++)if(this.insertConstant){var o=j===e-1?1:c[n][j],p=m===e-1?1:c[n][m];l[j][m]+=o*p}else l[j][m]+=c[n][j]*c[n][m];for(var n=0;f>n;n++)i[j]+=this.insertConstant&&j===e-1?d[n][g]:c[n][j]*d[n][g]}var q=new a.SingularValueDecomposition(l).solve(b.columnVector(i)).to1DArray();if(this.insertConstant){this.intercepts[g]=q[q.length-1];for(var j=0;e-1>j;j++)this.coefficients[j][g]=q[j]}else for(var j=0;e>j;j++)this.coefficients[j][g]=q[j]}for(var r,s=0,j=0,k=d.rows;k>j;j++)for(var t=this.compute(c[j]),g=0,h=t.length;h>g;g++)r=d[j][g]-t[g],s+=r*r;return s},coefficientOfDetermination:function(a,b,c){"undefined"==typeof c&&(c=!1);for(var d=a.rows,e=this.coefficients.columns,f=this.coefficients.rows,g=new Array(e),h=new Array(e),i=new Array(e),j=new Array(e),k=0;e>k;k++)i[k]=0,g[k]=0,h[k]=0;for(var l,m=0;e>m;m++){for(var k=0;d>k;k++)i[m]+=b[k][m];i[m]/=d}for(var k=0;d>k;k++)for(var n=this.compute(a[k]),m=0;e>m;m++)l=b[k][m]-n[m],g[m]+=l*l,l=b[k][m]-i[m],h[m]+=l*l;for(var m=0;e>m;m++)j[m]=1-g[m]/h[m];if(c)for(var m=0;e>m;m++)1!==j[m]&&(j[m]=d===f+1?0/0:1-(1-j[m])*((d-1)/(d-f-1)));return j},compute:function(a){if(a instanceof b)return d(this,a);for(var c=a.length,e=this.coefficients.columns,f=new Array(e),g=0;e>g;g++){f[g]=this.intercepts[g];for(var h=0;c>h;h++)f[g]+=a[h]*this.coefficients[h][g]}return f}},c});