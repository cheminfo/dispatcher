define(function(){function a(b){if(b instanceof a)return b;var c,d,e;if(c=b.length,d=b[0].length,void 0===d)throw"data must be a 2D array";for(e=0;c>e;e++)if(b[e].length!==d)throw"Inconsistent array dimensions";return b.rows=c,b.columns=d,b.__proto__=a.prototype,b}return a.from1DArray=function(b,c,d){var e,f,g;if(e=b*c,e!==d.length)throw"Data length does not match dimensions";for(g=new Array(b),f=0;b>f;f++)g[f]=d.slice(f*c,(f+1)*c);return new a(g)},a.rowVector=function(b){return new a([b])},a.columnVector=function(b){for(var c=new Array(b.length),d=0,e=b.length;e>d;d++)c[d]=[b[d]];return new a(c)},a.empty=function(b,c){for(var d=new Array(b),e=0;b>e;e++)d[e]=new Array(c);return new a(d)},a.zeros=function(b,c){return a.empty(b,c).fill(0)},a.ones=function(b,c){return a.empty(b,c).fill(1)},a.rand=function(b,c){var d=new Array(b*c),e=a.from1DArray(b,c,d);return e.apply(function(a,b,c){a[b][c]=Math.random()})},a.eye=function(b){for(var c=a.zeros(b,b),d=0;d<c.rows;d++)c[d][d]=1;return c},a.diag=function(b){for(var c=b.length,d=a.zeros(c,c),e=0;c>e;e++)d[e][e]=b[e];return d},a.prototype={checkRowIndex:function(a){if(0>a||a>this.rows-1)throw"Row index out of range."},checkColumnIndex:function(a){if(0>a||a>this.columns-1)throw"Column index out of range."},checkDimensions:function(a){if(this.rows!==a.rows||this.columns!==a.columns)throw"Matrices dimensions must be equal."},checkMultiply:function(a){if(this.columns!==a.rows)throw"Number of columns of left matrix must be equal to number of rows of right matrix."},apply:function(a){var b,c;for(b=0;b<this.rows;b++)for(c=0;c<this.columns;c++)a(this,b,c);return this},clone:function(){for(var b=this.rows,c=new Array(b),d=0;b>d;d++)c[d]=this[d].slice();return new a(c)},to1DArray:function(){for(var a=[],b=0;b<this.rows;b++)a=a.concat(this[b]);return a},to2DArray:function(){return this},isRowVector:function(){return 1===this.rows},isColumnVector:function(){return 1===this.columns},isVector:function(){return 1===this.rows||1===this.columns},isSquare:function(){return this.rows===this.columns},isSymmetric:function(){if(this.isSquare){for(var a=0;a<this.rows;a++)for(var b=0;a>=b;b++)if(this[a][b]!=this[b][a])return!1;return!0}return!1},set:function(a,b,c){return this[a][b]=c,this},get:function(a,b){return this[a][b]},fill:function(a){return this.apply(function(b,c,d){b[c][d]=a})},neg:function(){return this.mulS(-1)},add:function(b){return"number"==typeof b?this.addS(b):b instanceof a?this.addM(b):void 0},addS:function(a){return this.apply(function(b,c,d){b[c][d]+=a})},addM:function(a){return this.checkDimensions(a),this.apply(function(b,c,d){b[c][d]+=a[c][d]})},sub:function(b){return"number"==typeof b?this.subS(b):b instanceof a?this.subM(b):void 0},subS:function(a){return this.apply(function(b,c,d){b[c][d]-=a})},subM:function(a){return this.checkDimensions(a),this.apply(function(b,c,d){b[c][d]+=a[c][d]})},mul:function(b){return"number"==typeof b?this.mulS(b):b instanceof a?this.mulM(b):void 0},mulS:function(a){return this.apply(function(b,c,d){b[c][d]*=a})},mulM:function(a){return this.checkDimensions(a),this.apply(function(b,c,d){b[c][d]*=a[c][d]})},div:function(b){return"number"==typeof b?this.divS(b):b instanceof a?this.divM(b):void 0},divS:function(a){return this.apply(function(b,c,d){b[c][d]/=a})},divM:function(a){return this.checkDimensions(a),this.apply(function(b,c,d){b[c][d]/=a[c][d]})},getRow:function(b){return this.checkRowIndex(b),new a([this[b]])},setRow:function(b,c){if(this.checkRowIndex(b),c instanceof a||(c=a.rowVector(c)),c.columns!==this.columns)throw"Invalid row size";return this[b]=c[0],this},removeRow:function(a){if(this.checkRowIndex(a),1===this.rows)throw"A matrix cannot have less than one row";return this.splice(a,1),this.rows-=1,this},addRow:function(b,c){if(0>b||b>this.rows)throw"Row index out of range.";if(c instanceof a||(c=a.rowVector(c)),c.columns!==this.columns)throw"Invalid row size";return this.splice(b,0,c[0]),this.rows+=1,this},swapRows:function(a,b){this.checkRowIndex(a),this.checkRowIndex(b);var c=this[a];return this[a]=this[b],this[b]=c,this},getColumn:function(b){var c,d;for(this.checkColumnIndex(b),c=new Array(this.rows),d=0;d<this.rows;d++)c[d]=[this[d][b]];return new a(c)},setColumn:function(b,c){if(this.checkColumnIndex(b),c instanceof a||(c=a.columnVector(c)),c.rows!==this.rows)throw"Invalid column size";for(var d=0;d<this.rows;d++)this[d][b]=c[d][0];return this},removeColumn:function(a){if(this.checkColumnIndex(a),1===this.columns)throw"A matrix cannot have less than one column";for(var b=0,c=this.rows;c>b;b++)this[b].splice(a,1);return this.columns-=1,this},addColumn:function(b,c){if(0>b||b>this.columns)throw"Column index out of range.";if(c instanceof a||(c=a.columnVector(c)),c.rows!==this.rows)throw"Invalid column size";for(var d=0;d<this.rows;d++)this[d].splice(b,0,c[d][0]);return this.columns+=1,this},swapColumns:function(a,b){this.checkRowIndex(a),this.checkRowIndex(b);for(var c,d,e=this.rows,f=0;e>f;f++)d=this[f],c=d[a],d[a]=d[b],d[b]=c;return this},checkRowVector:function(b){if(b instanceof a&&b.isRowVector()&&(b=b.getRow(0)),b.length!==this.columns)throw"vector size must be the same as the number of columns";return b},checkColumnVector:function(b){if(b instanceof a&&b.isColumnVector()&&(b=b.getColumn(0)),b.length!==this.rows)throw"vector size must be the same as the number of rows";return b},addRowVector:function(a){return a=this.checkRowvector(a),this.apply(function(b,c,d){b[c][d]+=a[d]})},subRowVector:function(a){return a=this.checkRowvector(a),this.apply(function(b,c,d){b[c][d]-=a[d]})},mulRowVector:function(a){return a=this.checkRowvector(a),this.apply(function(b,c,d){b[c][d]*=a[d]})},divRowVector:function(a){return a=this.checkRowvector(a),this.apply(function(b,c,d){b[c][d]/=a[d]})},addColumnVector:function(a){return a=this.checkColumnVector(a),this.apply(function(b,c,d){b[c][d]+=a[c]})},subColumnVector:function(a){return a=this.checkColumnVector(a),this.apply(function(b,c,d){b[c][d]-=a[c]})},mulColumnVector:function(a){return a=this.checkColumnVector(a),this.apply(function(b,c,d){b[c][d]*=a[c]})},divColumnVector:function(a){return a=this.checkColumnVector(a),this.apply(function(b,c,d){b[c][d]/=a[c]})},mulRow:function(a,b){checkRowIndex(a);for(var c=0;c<this.columns;c++)this[a][c]*=b},mulColumn:function(a,b){checkColumnIndex(a);for(var c=0;c<this.rows;c++)this[c][a]*=b},max:function(){var a=-1/0;return this.apply(function(b,c,d){b[c][d]>a&&(a=b[c][d])}),a},maxIndex:function(){var a=-1/0,b={};return this.apply(function(c,d,e){c[d][e]>a&&(a=c[d][e],b.row=d,b.column=e)}),b},min:function(){var a=1/0;return this.apply(function(b,c,d){b[c][d]<a&&(a=b[c][d])}),a},minIndex:function(){var a=1/0,b={};return this.apply(function(c,d,e){c[d][e]<a&&(a=c[d][e],b.row=d,b.column=e)}),b},rowMins:function(){for(var b=a.empty(this.rows,1),c=0;c<this.rows;c++)b[c][0]=this.getRow(c).min();return b},rowMinsIndex:function(){for(var a=new Array(this.rows),b=0;b<this.rows;b++)a[b]=this.getRow(b).minIndex();return a},rowMaxs:function(){for(var b=a.empty(this.rows,1),c=0;c<this.rows;c++)b[c][0]=this.getRow(c).max();return b},rowMaxsIndex:function(){for(var a=new Array(this.rows),b=0;b<this.rows;b++)a[b]=this.getRow(b).maxIndex();return a},columnMins:function(){for(var b=a.empty(1,this.columns),c=0;c<this.columns;c++)b[0][c]=this.getColumn(c).min();return b},columnMinsIndex:function(){for(var a=new Array(this.columns),b=0;b<this.columns;b++)a[b]=this.getColumn(b).minIndex();return a},columnMaxs:function(){for(var b=a.empty(1,this.columns),c=0;c<this.columns;c++)b[0][c]=this.getColumn(c).max();return b},columnMaxsIndex:function(){for(var a=new Array(this.columns),b=0;b<this.columns;b++)a[b]=this.getColumn(b).maxIndex();return a},diag:function(){if(!this.isSquare())throw"Only square matrices have a diagonal.";for(var a=new Array(this.rows),b=0;b<this.rows;b++)a[b]=this[b][b];return a},columnSums:function(){if(1===this.rows)return this.clone();var b=a.zeros(1,this.columns);return this.apply(function(a,c,d){b[0][d]+=a[c][d]}),b},columnMeans:function(){return this.columnSums().div(this.rows)},rowSums:function(){if(1===this.columns)return this.clone();var b=a.zeros(this.rows,1);return this.apply(function(a,c,d){b[c][0]+=a[c][d]}),b},rowMeans:function(){return this.rowSums().div(this.columns)},cumulativeSum:function(){var a=0;return this.apply(function(b,c,d){a+=b[c][d],b[c][d]=a})},dot:function(a){if(!this.isVector()||!a.isVector())throw"Dot product only applicable to vectors";var b=this.to1DArray(),c=a.to1DArray();if(b.length!==c.length)throw"Vectors do not have the same size";for(var d=0,e=b.length,f=0;e>f;f++)d+=b[f]*c[f];return d},sum:function(){var a=0;return this.apply(function(b,c,d){a+=b[c][d]}),a},mean:function(){return this.sum()/(this.rows*this.columns)},mmul:function(b){this.checkMultiply(b);var c,d,e,f,g=a.empty(this.rows,b.columns);for(c=0;c<g.rows;c++)for(e=this.getRow(c),d=0;d<g.columns;d++)f=b.getColumn(d),g[c][d]=e.dot(f);return g},prod:function(){var a=1;return this.apply(function(b,c,d){a*=b[c][d]}),a},sortRows:function(){for(var a=0;a<this.rows;a++)this[a].sort();return this},sortColumns:function(){for(var a=0;a<this.columns;a++)this.setColumn(a,this.getColumn(a).to1DArray().sort());return this},transpose:function(){var b=a.empty(this.columns,this.rows);return this.apply(function(a,c,d){b[d][c]=a[c][d]}),b},subMatrix:function(b,c,d,e){if(b>c||d>e||0>b||b>=this.rows||0>c||c>=this.rows||0>d||d>=this.columns||0>e||e>=this.columns)throw"Argument out of range";for(var f=a.empty(c-b+1,e-d+1),g=b;c>=g;g++)for(var h=d;e>=h;h++)f[g-b][h-d]=this[g][h];return f},subMatrixRow:function(b,c,d){if(c>d||0>c||c>=this.columns||0>d||d>=this.columns)throw"Argument out of range.";for(var e=a.empty(b.length,d-c+1),f=0;f<b.length;f++)for(var g=c;d>=g;g++){if(b[f]<0||b[f]>=this.rows)throw"Argument out of range.";e[f][g-c]=this[b[f]][g]}return e},trace:function(){if(!this.isSquare)throw"The matrix is not square";for(var a=0,b=0;b<this.rows;b++)a+=this[b][b];return a},inverse:function(){return this.solve(a.eye(this.rows))},solve:function(a){var b,c=this;return require(["./decompositions"],function(d){b=c.isSquare()?new d.LuDecomposition(c).solve(a):new d.QrDecomposition(c).solve(a)}),b},get size(){return this.rows*this.columns}},a.prototype.splice=Array.prototype.splice,a});