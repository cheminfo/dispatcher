define(["modules/default/defaultcontroller"],function(a){function b(){}function c(a,b){return function(c){var d=a.getMatrixElementFromEvent(c);d&&(a.setVarFromEvent(b,"row","matrix",["xLabel",d[0]]),a.setVarFromEvent(b,"col","matrix",["yLabel",d[1]]),a.setVarFromEvent(b,"intersect","matrix",["data",d[0],d[1]]))}}return b.prototype=$.extend(!0,{},a),b.prototype.moduleInformation={moduleName:"Matrix display",description:"Display an array of array as a colored matrix",author:"Norman Pellet",date:"24.12.2013",license:"MIT",cssClass:"canvas_matrix"},b.prototype.getMatrixElementFromEvent=function(a){var b;if(!(b=this.module.getDataFromRel("matrix")))return!1;var c=this.module.view.getPxPerCell(),d=this.module.view.getXYShift();a.offsetX=a.offsetX||a.pageX-$(a.target).offset().left,a.offsetY=a.offsetY||a.pageY-$(a.target).offset().top;var e=Math.floor((a.offsetX-d.x)/c),f=Math.floor((a.offsetY-d.y)/c),g=b.get().data;return!g||!g[0]||0>e||0>f||f>g.length||e>g[0].length?!1:[e,f]},b.prototype.initEvents=function(){var a=$(this.module.getDomContent());a.on("mousemove","canvas",$.debounce(25,c(this,"onPixelHover"))),a.on("click","canvas",c(this,"onPixelClick"))},b.prototype.references={row:{label:"Row",description:"Sends the information description the row"},col:{label:"Column",description:"Sends the information description the column"},intersect:{label:"Intersection",description:"Sends the information description the intersection where the mouse is located"},matrix:{label:"Matrix",description:"A 2D array representing the matrix"}},b.prototype.variablesIn=["matrix"],b.prototype.events={onPixelHover:{label:"mouse hover pixel",description:"When the mouses moves over a new pixel of the data matrix",refVariable:["row","col","intersect"]},onPixelClick:{label:"click on a pixel",description:"When the users click on any pixel",refVariable:["row","col","intersect"]}},b.prototype.configurationStructure=function(){return{groups:{group:{options:{type:"list"},fields:{highcontrast:{"default":"true",type:"checkbox",title:"Contrast",options:{"true":"Take data min/max as boundaries"}},color:{type:"color",title:"Color",multiple:!0}}}}}},b.prototype.configAliases={colors:["groups","group",0,"color"],highContrast:["groups","group",0,"highcontrast",0,0]},b});